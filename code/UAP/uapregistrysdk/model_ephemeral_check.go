/*
Service API

API for managing services

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uapregistrysdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EphemeralCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EphemeralCheck{}

// EphemeralCheck Ephemeral check configuration
type EphemeralCheck struct {
	// 健康检查类型：TTL
	CheckType string `json:"check_type"`
	// 服务超期未更新则删除
	RenewalDeleteTimeout *string `json:"renewal_delete_timeout,omitempty"`
	// 服务更新周期
	RenewalInterval *string `json:"renewal_interval,omitempty"`
	// 服务超期未更新则不健康
	RenewalUnhealthyTimeout *string `json:"renewal_unhealthy_timeout,omitempty"`
}

type _EphemeralCheck EphemeralCheck

// NewEphemeralCheck instantiates a new EphemeralCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEphemeralCheck(checkType string) *EphemeralCheck {
	this := EphemeralCheck{}
	this.CheckType = checkType
	var renewalDeleteTimeout string = "60s"
	this.RenewalDeleteTimeout = &renewalDeleteTimeout
	var renewalInterval string = "15s"
	this.RenewalInterval = &renewalInterval
	var renewalUnhealthyTimeout string = "30s"
	this.RenewalUnhealthyTimeout = &renewalUnhealthyTimeout
	return &this
}

// NewEphemeralCheckWithDefaults instantiates a new EphemeralCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEphemeralCheckWithDefaults() *EphemeralCheck {
	this := EphemeralCheck{}
	var checkType string = "TTL"
	this.CheckType = checkType
	var renewalDeleteTimeout string = "60s"
	this.RenewalDeleteTimeout = &renewalDeleteTimeout
	var renewalInterval string = "15s"
	this.RenewalInterval = &renewalInterval
	var renewalUnhealthyTimeout string = "30s"
	this.RenewalUnhealthyTimeout = &renewalUnhealthyTimeout
	return &this
}

// GetCheckType returns the CheckType field value
func (o *EphemeralCheck) GetCheckType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CheckType
}

// GetCheckTypeOk returns a tuple with the CheckType field value
// and a boolean to check if the value has been set.
func (o *EphemeralCheck) GetCheckTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckType, true
}

// SetCheckType sets field value
func (o *EphemeralCheck) SetCheckType(v string) {
	o.CheckType = v
}

// GetRenewalDeleteTimeout returns the RenewalDeleteTimeout field value if set, zero value otherwise.
func (o *EphemeralCheck) GetRenewalDeleteTimeout() string {
	if o == nil || IsNil(o.RenewalDeleteTimeout) {
		var ret string
		return ret
	}
	return *o.RenewalDeleteTimeout
}

// GetRenewalDeleteTimeoutOk returns a tuple with the RenewalDeleteTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EphemeralCheck) GetRenewalDeleteTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalDeleteTimeout) {
		return nil, false
	}
	return o.RenewalDeleteTimeout, true
}

// HasRenewalDeleteTimeout returns a boolean if a field has been set.
func (o *EphemeralCheck) HasRenewalDeleteTimeout() bool {
	if o != nil && !IsNil(o.RenewalDeleteTimeout) {
		return true
	}

	return false
}

// SetRenewalDeleteTimeout gets a reference to the given string and assigns it to the RenewalDeleteTimeout field.
func (o *EphemeralCheck) SetRenewalDeleteTimeout(v string) {
	o.RenewalDeleteTimeout = &v
}

// GetRenewalInterval returns the RenewalInterval field value if set, zero value otherwise.
func (o *EphemeralCheck) GetRenewalInterval() string {
	if o == nil || IsNil(o.RenewalInterval) {
		var ret string
		return ret
	}
	return *o.RenewalInterval
}

// GetRenewalIntervalOk returns a tuple with the RenewalInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EphemeralCheck) GetRenewalIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalInterval) {
		return nil, false
	}
	return o.RenewalInterval, true
}

// HasRenewalInterval returns a boolean if a field has been set.
func (o *EphemeralCheck) HasRenewalInterval() bool {
	if o != nil && !IsNil(o.RenewalInterval) {
		return true
	}

	return false
}

// SetRenewalInterval gets a reference to the given string and assigns it to the RenewalInterval field.
func (o *EphemeralCheck) SetRenewalInterval(v string) {
	o.RenewalInterval = &v
}

// GetRenewalUnhealthyTimeout returns the RenewalUnhealthyTimeout field value if set, zero value otherwise.
func (o *EphemeralCheck) GetRenewalUnhealthyTimeout() string {
	if o == nil || IsNil(o.RenewalUnhealthyTimeout) {
		var ret string
		return ret
	}
	return *o.RenewalUnhealthyTimeout
}

// GetRenewalUnhealthyTimeoutOk returns a tuple with the RenewalUnhealthyTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EphemeralCheck) GetRenewalUnhealthyTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalUnhealthyTimeout) {
		return nil, false
	}
	return o.RenewalUnhealthyTimeout, true
}

// HasRenewalUnhealthyTimeout returns a boolean if a field has been set.
func (o *EphemeralCheck) HasRenewalUnhealthyTimeout() bool {
	if o != nil && !IsNil(o.RenewalUnhealthyTimeout) {
		return true
	}

	return false
}

// SetRenewalUnhealthyTimeout gets a reference to the given string and assigns it to the RenewalUnhealthyTimeout field.
func (o *EphemeralCheck) SetRenewalUnhealthyTimeout(v string) {
	o.RenewalUnhealthyTimeout = &v
}

func (o EphemeralCheck) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EphemeralCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["check_type"] = o.CheckType
	if !IsNil(o.RenewalDeleteTimeout) {
		toSerialize["renewal_delete_timeout"] = o.RenewalDeleteTimeout
	}
	if !IsNil(o.RenewalInterval) {
		toSerialize["renewal_interval"] = o.RenewalInterval
	}
	if !IsNil(o.RenewalUnhealthyTimeout) {
		toSerialize["renewal_unhealthy_timeout"] = o.RenewalUnhealthyTimeout
	}
	return toSerialize, nil
}

func (o *EphemeralCheck) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"check_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEphemeralCheck := _EphemeralCheck{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEphemeralCheck)

	if err != nil {
		return err
	}

	*o = EphemeralCheck(varEphemeralCheck)

	return err
}

type NullableEphemeralCheck struct {
	value *EphemeralCheck
	isSet bool
}

func (v NullableEphemeralCheck) Get() *EphemeralCheck {
	return v.value
}

func (v *NullableEphemeralCheck) Set(val *EphemeralCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableEphemeralCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableEphemeralCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEphemeralCheck(val *EphemeralCheck) *NullableEphemeralCheck {
	return &NullableEphemeralCheck{value: val, isSet: true}
}

func (v NullableEphemeralCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEphemeralCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
