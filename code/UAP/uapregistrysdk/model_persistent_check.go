/*
Service API

API for managing services

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uapregistrysdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PersistentCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersistentCheck{}

// PersistentCheck Persistent health check configuration
type PersistentCheck struct {
	// 健康检查类型：HTTP/HTTPS
	CheckType string `json:"check_type"`
	// 健康检查时间间隔
	CheckInterval *string `json:"check_interval,omitempty"`
	// 健康检查超时时间
	CheckTimeout *string `json:"check_timeout,omitempty"`
	// 服务超期健康检查一直未成功则不健康
	CheckUnhealthyTimeout *string `json:"check_unhealthy_timeout,omitempty"`
	// 健康检查URL地址，示例：/healthcheck
	CheckHttpUrl string `json:"check_http_url"`
	// HTTP, HTTPS健康检查使用的HTTP 方法：GET, HEAD, OPTIONS
	CheckHttpMethod *string `json:"check_http_method,omitempty"`
}

type _PersistentCheck PersistentCheck

// NewPersistentCheck instantiates a new PersistentCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersistentCheck(checkType string, checkHttpUrl string) *PersistentCheck {
	this := PersistentCheck{}
	this.CheckType = checkType
	var checkInterval string = "15s"
	this.CheckInterval = &checkInterval
	var checkTimeout string = "5s"
	this.CheckTimeout = &checkTimeout
	var checkUnhealthyTimeout string = "60s"
	this.CheckUnhealthyTimeout = &checkUnhealthyTimeout
	this.CheckHttpUrl = checkHttpUrl
	return &this
}

// NewPersistentCheckWithDefaults instantiates a new PersistentCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersistentCheckWithDefaults() *PersistentCheck {
	this := PersistentCheck{}
	var checkInterval string = "15s"
	this.CheckInterval = &checkInterval
	var checkTimeout string = "5s"
	this.CheckTimeout = &checkTimeout
	var checkUnhealthyTimeout string = "60s"
	this.CheckUnhealthyTimeout = &checkUnhealthyTimeout
	return &this
}

// GetCheckType returns the CheckType field value
func (o *PersistentCheck) GetCheckType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CheckType
}

// GetCheckTypeOk returns a tuple with the CheckType field value
// and a boolean to check if the value has been set.
func (o *PersistentCheck) GetCheckTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckType, true
}

// SetCheckType sets field value
func (o *PersistentCheck) SetCheckType(v string) {
	o.CheckType = v
}

// GetCheckInterval returns the CheckInterval field value if set, zero value otherwise.
func (o *PersistentCheck) GetCheckInterval() string {
	if o == nil || IsNil(o.CheckInterval) {
		var ret string
		return ret
	}
	return *o.CheckInterval
}

// GetCheckIntervalOk returns a tuple with the CheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentCheck) GetCheckIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.CheckInterval) {
		return nil, false
	}
	return o.CheckInterval, true
}

// HasCheckInterval returns a boolean if a field has been set.
func (o *PersistentCheck) HasCheckInterval() bool {
	if o != nil && !IsNil(o.CheckInterval) {
		return true
	}

	return false
}

// SetCheckInterval gets a reference to the given string and assigns it to the CheckInterval field.
func (o *PersistentCheck) SetCheckInterval(v string) {
	o.CheckInterval = &v
}

// GetCheckTimeout returns the CheckTimeout field value if set, zero value otherwise.
func (o *PersistentCheck) GetCheckTimeout() string {
	if o == nil || IsNil(o.CheckTimeout) {
		var ret string
		return ret
	}
	return *o.CheckTimeout
}

// GetCheckTimeoutOk returns a tuple with the CheckTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentCheck) GetCheckTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.CheckTimeout) {
		return nil, false
	}
	return o.CheckTimeout, true
}

// HasCheckTimeout returns a boolean if a field has been set.
func (o *PersistentCheck) HasCheckTimeout() bool {
	if o != nil && !IsNil(o.CheckTimeout) {
		return true
	}

	return false
}

// SetCheckTimeout gets a reference to the given string and assigns it to the CheckTimeout field.
func (o *PersistentCheck) SetCheckTimeout(v string) {
	o.CheckTimeout = &v
}

// GetCheckUnhealthyTimeout returns the CheckUnhealthyTimeout field value if set, zero value otherwise.
func (o *PersistentCheck) GetCheckUnhealthyTimeout() string {
	if o == nil || IsNil(o.CheckUnhealthyTimeout) {
		var ret string
		return ret
	}
	return *o.CheckUnhealthyTimeout
}

// GetCheckUnhealthyTimeoutOk returns a tuple with the CheckUnhealthyTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentCheck) GetCheckUnhealthyTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.CheckUnhealthyTimeout) {
		return nil, false
	}
	return o.CheckUnhealthyTimeout, true
}

// HasCheckUnhealthyTimeout returns a boolean if a field has been set.
func (o *PersistentCheck) HasCheckUnhealthyTimeout() bool {
	if o != nil && !IsNil(o.CheckUnhealthyTimeout) {
		return true
	}

	return false
}

// SetCheckUnhealthyTimeout gets a reference to the given string and assigns it to the CheckUnhealthyTimeout field.
func (o *PersistentCheck) SetCheckUnhealthyTimeout(v string) {
	o.CheckUnhealthyTimeout = &v
}

// GetCheckHttpUrl returns the CheckHttpUrl field value
func (o *PersistentCheck) GetCheckHttpUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CheckHttpUrl
}

// GetCheckHttpUrlOk returns a tuple with the CheckHttpUrl field value
// and a boolean to check if the value has been set.
func (o *PersistentCheck) GetCheckHttpUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckHttpUrl, true
}

// SetCheckHttpUrl sets field value
func (o *PersistentCheck) SetCheckHttpUrl(v string) {
	o.CheckHttpUrl = v
}

// GetCheckHttpMethod returns the CheckHttpMethod field value if set, zero value otherwise.
func (o *PersistentCheck) GetCheckHttpMethod() string {
	if o == nil || IsNil(o.CheckHttpMethod) {
		var ret string
		return ret
	}
	return *o.CheckHttpMethod
}

// GetCheckHttpMethodOk returns a tuple with the CheckHttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentCheck) GetCheckHttpMethodOk() (*string, bool) {
	if o == nil || IsNil(o.CheckHttpMethod) {
		return nil, false
	}
	return o.CheckHttpMethod, true
}

// HasCheckHttpMethod returns a boolean if a field has been set.
func (o *PersistentCheck) HasCheckHttpMethod() bool {
	if o != nil && !IsNil(o.CheckHttpMethod) {
		return true
	}

	return false
}

// SetCheckHttpMethod gets a reference to the given string and assigns it to the CheckHttpMethod field.
func (o *PersistentCheck) SetCheckHttpMethod(v string) {
	o.CheckHttpMethod = &v
}

func (o PersistentCheck) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersistentCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["check_type"] = o.CheckType
	if !IsNil(o.CheckInterval) {
		toSerialize["check_interval"] = o.CheckInterval
	}
	if !IsNil(o.CheckTimeout) {
		toSerialize["check_timeout"] = o.CheckTimeout
	}
	if !IsNil(o.CheckUnhealthyTimeout) {
		toSerialize["check_unhealthy_timeout"] = o.CheckUnhealthyTimeout
	}
	toSerialize["check_http_url"] = o.CheckHttpUrl
	if !IsNil(o.CheckHttpMethod) {
		toSerialize["check_http_method"] = o.CheckHttpMethod
	}
	return toSerialize, nil
}

func (o *PersistentCheck) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"check_type",
		"check_http_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPersistentCheck := _PersistentCheck{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPersistentCheck)

	if err != nil {
		return err
	}

	*o = PersistentCheck(varPersistentCheck)

	return err
}

type NullablePersistentCheck struct {
	value *PersistentCheck
	isSet bool
}

func (v NullablePersistentCheck) Get() *PersistentCheck {
	return v.value
}

func (v *NullablePersistentCheck) Set(val *PersistentCheck) {
	v.value = val
	v.isSet = true
}

func (v NullablePersistentCheck) IsSet() bool {
	return v.isSet
}

func (v *NullablePersistentCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersistentCheck(val *PersistentCheck) *NullablePersistentCheck {
	return &NullablePersistentCheck{value: val, isSet: true}
}

func (v NullablePersistentCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersistentCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
